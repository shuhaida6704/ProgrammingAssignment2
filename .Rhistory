getwd()
ls
library(datasets)
data(iris)
?iris
rowMeans(iris[, 1:4])
colMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
set.seed(2)
x<- rep(0:2, each =3)
x
e<- rnorm(9,0,20)
e
}
makeCacheMatrix <- function(x = matrix()) {
##makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
p <- NULL
set <- function(y) {
x <<- y
p <<- NULL
}
get <- function() x
setmean <- function(mean) p <<- mean
getmean <- function() p
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
## Return a matrix that is the inverse of 'x'
p <- x$getmean()
if(!is.null(p)) {
message("getting cached data")
return(p)
}
data <- x$get()
p <- mean(data, ...)
x$setmean(p)
p
}
makeCacheMatrix <- function(x = matrix()) {
##makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
p <- NULL
set <- function(y) {
x <<- y
p <<- NULL
}
get <- function() x
setmean <- function(mean) p <<- mean
getmean <- function() p
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
## Return a matrix that is the inverse of 'x'
p <- x$getmean()
if(!is.null(p)) {
message("getting cached data")
return(p)
}
data <- x$get()
p <- mean(data, ...)
x$setmean(p)
p
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
p <<- NULL
x <- c(1:10)
p <- 1:10
makeCacheMatrix()
p
x <- 1:10
makeCacheMatrix()
x <- matrix(1:8, 2, 4)
x
makeCacheMatrix()
x <- matrix(1:8, 2, 4)
makeCacheMatrix()
makeCacheMatrix(x)
pwd
getwd()
makeCacheMatrix(x)
trymat <- makeCacheMatrix(x <- matrix(1:8, 2, 4))
trymat$get
trymat$get()
trymat$get(x)
trymat <- makeCacheMatrix(x= matrix(1:8, 2, 4))
trymat$get()
trymat$setmean()
trymat$solve()
trymat$cachesolve()
trymat <- makeCacheMatrix(x= matrix(1:8, 2, 4))
trymat1 <- cacheSolve(x= trymat)
trymat1$get()
cachesolve()
cacheSolve()
cacheSolve(trymat)
trymat$getmean()
trymat$get()
trymat$setmean(m)
trymat$get()
trymat$solve()
trymat$solve(m)
trymat1$solve(m)
m <- x$getmean()
try1<-(x = matrix(1:8, 2, 4))
try1<-makeCacheMatrix(x = matrix(1:8, 2, 4))
try1$get()
try2<-cacheSolve(x = matrix(1:8, 2, 4))
cacheSolve(try1)
try1<-makeCacheMatrix(x = matrix(1:8, 2, 4))
try1$get()
try1$getMean()
try1$getmean()
try1$set(matrix(1:8, 2, 4))
try1$get()
cacheSolve(try1)
makeCacheMatrix <- function(x = matrix()) {
##makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
##cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
try1<-makeCacheMatrix(x = matrix(1:8, 2, 4))
try1$get()
try1$set(matrix(1:8, 2, 4))
try1$get()
cacheSolve(try1)
try1<-makeCacheMatrix(x = matrix(1:4, 2))
try1$get()
try1$set(matrix(1:4, 2))
try1$get()
cacheSolve(try1)
try1$getmean()
b<-try1$getmean()
try1$get() %*%b
makeCacheMatrix <- function(x = matrix()) {
##makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
##cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
##--SAMPLE OUTPUT--
##try1<-makeCacheMatrix(x = matrix(1:4, 2))
##> try1$get()
##[,1] [,2]
##[1,]    1    3
##[2,]    2    4
##> try1$set(matrix(1:4, 2))
##> try1$get()
##[,1] [,2]
##[1,]    1    3
##[2,]    2    4
##> cacheSolve(try1)
##[,1] [,2]
##[1,]   -2  1.5
##[2,]    1 -0.5
##> try1$getmean()
##[,1] [,2]
##[1,]   -2  1.5
##[2,]    1 -0.5
##> b<-try1$getmean()
##> try1$get() %*%b
##[,1] [,2]
##[1,]    1    0
##[2,]    0    1
try1<-makeCacheMatrix(x = matrix(1:4, 2))
try1$get()
cacheSolve(try1)
try1$getmean()
b<-try1$getmean()
try1$get() %*%b
